from labs_1_and_2 import lab1, lab2, LFSR
from lab_3 import elliptic_curve, point

print("Лабораторная 1")
print("*******************************************************************")
lab1.task2([1,7,2,8,3,5,4,9,6], "Схема предварительного распределения ключей состоит из двух алгоритмов: распределения исходной ключевой информации и формирования ключа.".replace(' ', '').replace(':','').replace('.','').upper())
print()
lab1.task3([LFSR([1,0,1,0,1,0,1,1], [1,2,3,5]), LFSR([0,1,0,0,1,0,1,1], [0,3,5,7])], 16, 15, 'shrinking')
print()
print("*******************************************************************")
print("Лабораторная 2")
print("*******************************************************************")
lab2.task1('0a16df83c09675ac', [25, 61, 21, 45, 23, 9, 24, 62, 36, 48, 39, 20, 17, 38, 6, 37, 22, 53, 54, 35, 12, 7, 51, 29, 32, 43, 27, 41, 44, 28, 3, 10, 46, 40, 47, 2, 31, 55, 14, 49, 19, 8, 58, 16, 26, 63, 13, 50, 4, 34, 33, 52, 42, 0, 57, 30, 11, 56, 18, 1, 59, 5, 60, 15])
lab2.task1('88ad907012d093a2', [25, 61, 21, 45, 23, 9, 24, 62, 36, 48, 39, 20, 17, 38, 6, 37, 22, 53, 54, 35, 12, 7, 51, 29, 32, 43, 27, 41, 44, 28, 3, 10, 46, 40, 47, 2, 31, 55, 14, 49, 19, 8, 58, 16, 26, 63, 13, 50, 4, 34, 33, 52, 42, 0, 57, 30, 11, 56, 18, 1, 59, 5, 60, 15])
print()
lab2.task2('0a16df83c09675ac88ad907012d093a2', [13, 5, 12, 6, 14, 9, 10, 15, 3, 2, 0, 8, 7, 11, 1, 4, 2, 8, 3, 9, 13, 15, 2, 1, 6, 4, 5, 7, 14, 0, 10, 11, 15, 10, 4, 6, 5, 13, 9, 11, 12, 14, 3, 1, 0, 8, 2, 7, 15, 5, 14, 11, 10, 6, 12, 0, 4, 2, 3, 8, 9, 1, 13, 7])
print("*******************************************************************")
print("Лабораторная 3")
print("*******************************************************************")
task_1_curvers = [elliptic_curve(29,6,8), elliptic_curve(23,11,3), elliptic_curve(31,3,17)]
task_1_points = [point(5,8), point(7,25), point(7,9), point(10,13)]
for curve in task_1_curvers:
    print(curve.is_singular())
    for P in task_1_points:
        print(curve, P, curve.does_contain_point(P))
print("\n\n")
print(elliptic_curve(31,3,17).multiply_point(point(13,18), 13))